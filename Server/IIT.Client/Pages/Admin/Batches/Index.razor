@page "/admin/batches/"
@inject IMatToaster _matToaster
@inject NavigationManager _nabigationManager
@inject IBatchHandler _batchService
<MatTable Class="mat-elevation-z5" 
          Items="@Batches"
          AllowSelection="true">
    <MatTableHeader>
        <th>Name</th>
        <th style="width:20%">Starts On</th>
        <th style="width:20%">Ends On</th>
        <th style="width:25%">Number of semesters</th>
        <th style="width:25%">Semester Duration (months)</th>
        <th>
            <div class="float-right" style="width:105px;">
                <MatFAB Icon="@MatIconNames.Add"
                        Mini="true"
                        OnClick="@((e) => AddBatchDialog())"
                        Raised="true"></MatFAB>
            </div>
        </th>
    </MatTableHeader>
    <MatTableRow Context="Batch">
        <td @onclick="(() => ViewBatch(Batch))"> @Batch.Name</td>
        <td @onclick="(() => ViewBatch(Batch))">@Batch.StartsOn.ToString("dd MMMM, yyyy")</td>
        <td @onclick="(() => ViewBatch(Batch))">@Batch.EndsOn.ToString("dd MMMM, yyyy")</td>
        <td @onclick="(() => ViewBatch(Batch))">@Batch.NumberOfSemester</td>
        <td @onclick="(() => ViewBatch(Batch))">@Batch.SemesterDuration</td>
        <td>
            <MatButton Icon="@MatIconNames.Edit"
                       OnClick="@(() => EditBatch(Batch))"/>
        </td>
    </MatTableRow>
</MatTable>
<MatDialog @bind-IsOpen="@addDialogOpen">
    <MatDialogTitle>Create Batch</MatDialogTitle>
    <MatDialogContent>
        <EditForm Model="@CurrentBatch" OnValidSubmit="@CreateBatch">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <fieldset>
                <div class="form-group">
                    <MatTextField @bind-Value="@CurrentBatch.Name"
                                  Label="Batch Name"
                                  Icon="@MatIconNames.People"
                                  IconTrailing="true"
                                  FullWidth="true"
                                  Required="true" />
                </div>
                <div class="form-group">
                    <MatNumericUpDownField @bind-Value="@CurrentBatch.NumberOfSemester"
                                           Label="Number of Semester"
                                           Minimum="1" />
                    <MatNumericUpDownField @bind-Value="@CurrentBatch.SemesterDuration"
                                           Label="Semester Duration (Months)"
                                           Minimum="1" />
                </div>
                <div class="form-group">
                    <MatBlazor.MatDatePicker @bind-Value="@CurrentTime"
                                             Label="Starts On" />
                </div>
            </fieldset>
        </EditForm>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { addDialogOpen = false; })">Cancel</MatButton>
        <MatButton OnClick="@CreateBatch"
                   Label="@GetEditState()"/>
    </MatDialogActions>
</MatDialog>
@code
{
    private List<Batch> Batches;
    private int TotalBatch;
    private bool addDialogOpen;
    public Batch CurrentBatch { get; set; } = new Batch();
    public DateTime CurrentTime
    {
        get => CurrentBatch.StartsOn;
        set => CurrentBatch.StartsOn = value.AddHours(6);
    }

    protected override async Task OnInitializedAsync()
    {
        Batches = await _batchService.GetBatches(1);
        if (Batches == null || Batches.Count == 0)
        {
            _matToaster.Add("No Batches found. Create New", MatBlazor.MatToastType.Info);
        }
    }

    private string GetEditState()
    {
        return CurrentBatch.Id == 0 ? "Create Batch" : "Update Batch";
    }

    private void AddBatchDialog()
    {
        CurrentBatch = new Batch();
        addDialogOpen = true;
    }

    private async void CreateBatch()
    {
        addDialogOpen = false;
        if (CurrentBatch.Id == 0)
        {
            var res = await _batchService.CreateBatch(CurrentBatch);
            var toast = res.Actionstatus ? MatToastType.Success : MatToastType.Danger;
            if (res.Actionstatus && res.Data is int batchId)
            {
                var batch = await _batchService.GetBatch(batchId);
                if (batch != null)
                {
                    Batches.Insert(0, batch);
                    this.StateHasChanged();
                }
            }
        }
        else
        {
            var response = await _batchService.UpdateBatch(CurrentBatch);
            var toastType = response.Actionstatus ? MatToastType.Success : MatToastType.Danger;
            _matToaster.Add(response.Message, toastType);
        }
    }

    private void EditBatchDialog(Batch batch)
    {
        CurrentBatch = batch;
        addDialogOpen = true;
    }

    private void ViewBatch(Batch batch)
    {
        _nabigationManager.NavigateTo("/admin/batches/details/" + batch.Id.ToString());
    }

    private void EditBatch(Batch batch)
    {
        CurrentBatch = batch;
        addDialogOpen = true;
        this.StateHasChanged();
    }
}